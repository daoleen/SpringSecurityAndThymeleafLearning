<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
       xmlns:beans="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd
       http://www.springframework.org/schema/jdbc
http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd">

    <jdbc:embedded-database id="dataSource" type="H2">
        <jdbc:script location="classpath*: sql/security-schema.sql" />
        <jdbc:script location="classpath*: sql/security-users.sql" />
        <jdbc:script location="classpath*: sql/security-user-authorities.sql" />
        <jdbc:script location="classpath*: sql/security-groups-schema.sql" />
        <jdbc:script location="classpath*: sql/security-groups-mapping.sql" />
    </jdbc:embedded-database>

    <!--
        ° ? matches a single character
        ° * matches zero or more characters, excluding /
        ° ** matches zero or more directories in a path
    -->
    <http pattern="/resources/**" security="none" />


    <!--
    <http auto-config="true">
        <intercept-url pattern="/" access="ROLE_ANONYMOUS,ROLE_USER" />
        <intercept-url pattern="/account/login" access="ROLE_ANONYMOUS,ROLE_USER" />
        <intercept-url pattern="/account/logout" access="ROLE_ANONYMOUS,ROLE_USER" />
        <intercept-url pattern="/admin/*" access="ROLE_ADMIN" />
        <intercept-url pattern="/**" access="ROLE_USER" />

        <form-login login-page="/account/login"
                    login-processing-url="/account/login/process"
                    authentication-failure-url="/account/login?fail=true"
                    username-parameter="username"
                    password-parameter="password" />

        <logout logout-url="/account/logout" />
    </http>
    -->

    <!-- use-expressions="true" - For using SpringSecurity tags in Thymeleaf -->
    <http auto-config="true" use-expressions="true">

        <!-- when it uses an expressions there are new way to define access over
             hasRole(), hasAuthority(), hasAnyRole(), hasAnyAuthority(), string permitAll,...etc
        -->
        <intercept-url pattern="/" access="permitAll" />
        <intercept-url pattern="/account/login" access="hasAnyRole('ROLE_ANONYMOUS','ROLE_USER')" />
        <intercept-url pattern="/account/logout" access="hasAnyRole('ROLE_ANONYMOUS','ROLE_USER')" />
        <intercept-url pattern="/admin/*" access="hasRole('ROLE_ADMIN')" />
        <intercept-url pattern="/**" access="ROLE_USER" />

        <!-- default-target-url="/account/profile" - перенаправляет юзера после удачной авторизации
            вроде как id не принимает (хотя возможно), если так, то можно его направить на контроллер
            в котором сделать редирект на профиль (костыль)
        -->
        <form-login login-page="/account/login"
                    login-processing-url="/account/login/process"
                    authentication-failure-url="/account/login?fail=true"
                    username-parameter="username"
                    password-parameter="password"
                />

        <logout logout-url="/account/logout" />
    </http>


    <authentication-manager>
        <!--<authentication-provider>-->
            <!--<user-service>-->
                <!--<user name="admin" authorities="ROLE_ADMIN" password="admin" />-->
                <!--<user name="people" authorities="ROLE_USER,ROLE_ADMIN" password="user" />-->
            <!--</user-service>-->
        <!--</authentication-provider>-->

        <!-- можно разработать свой userService
            одним из преимуществ разработки собственного юзер-сервиса является то, что
            при этом подходе авторизация будет происходить через доменную модель приложения,
            т.е. через DAO UserService, построенного разработчиком
        -->
        <!--<authentication-provider user-service-ref="myUserDetailsService" />-->

        <!-- самый конфигурируемый подход - это разработка собственного AuthenticationProvider
            (лучше всего вместе с UserService).
            Переопределение стандартного AuthenticationProvider может позволить авторизацию пользователя
             не только через username, а вместо его например через email+telephone
        -->

        <!-- SQL-based authentication -->

        <!--
         ___________________________________________________________________________________________________
        |Namespace query attribute      | Description                   | Expected SQL columns              |
        |_______________________________|_______________________________|___________________________________|
        |users-by-username-query        |Returns one or more users      | Username (string)                 |
        |                               |matching the username;         | Password (string)                 |
        |                               |only the first user is used    | Enabled (Boolean)                 |
        |_______________________________|_______________________________|___________________________________|
        |authorities-by-username-query  |Returns one or more granted    | Username (string)                 |
        |                               |authorities directly provided  | Granted Authority (string)        |
        |                               |to the user; typically used    |                                   |
        |                               |when GBAC is DISABLED.         |                                   |
        |_______________________________|_______________________________|___________________________________|
        |group-authorities-by-username- |Returns granted authorities    | Group Primary Key (any)           |
        |query                          |and group details provided to  | Group Name (any)                  |
        |                               |the user through group         | Granted Authority (string)        |
        |                               |membership; used when GBAC is  |                                   |
        |                               |enabled.                       |                                   |
        |_______________________________|_______________________________|___________________________________|

        -->

        <authentication-provider>
            <jdbc-user-service id="jdbcUserDetailsManager"
                               data-source-ref="dataSource"
                               users-by-username-query="
                                    select email,password,true from calendar_users
                                    where email = ?"
                               authorities-by-username-query="
                                    select cua.id, cua.authority
                                    from calendar_users cu, calendar_user_authorities cua
                                    where cu.email = ? and cu.id = cua.calendar_user"
                    group-authorities-by-username-query=
                            "select g.id, g.group_name, ga.authority
                            from groups g, group_member gm, group_authorities ga
                            where gm.username= ? and
                            g.id = ga.group_id and
                            g.id = gm.group_id"
                    />
            <password-encoder ref="passwordEncoder" />
        </authentication-provider>
    </authentication-manager>

    <beans:bean id="myUserDetailsService" class="com.daoleen.devicemeeting.web.security.MyUserDetailsService" />
    <beans:bean id="passwordEncoder" class="org.springframework.security.crypto.password.StandardPasswordEncoder">
    </beans:bean>

</beans:beans>